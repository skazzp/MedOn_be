# This workflow will build and push a new container image to Amazon ECR.

# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DEV_AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.DEV_AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_LOGIN: ${{ secrets.SMTP_LOGIN }}
          BASE_FRONT_URL: ${{ secrets.BASE_FRONT_URL }}
          BASE_SERVER_URL: ${{ secrets.BASE_SERVER_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_IMAGE_BUCKET_ACCESS_KEY_ID: ${{ secrets.AWS_IMAGE_BUCKET_ACCESS_KEY_ID }}
          AWS_IMAGE_BUCKET_SECRET_ACCESS_KEY: ${{ secrets.AWS_IMAGE_BUCKET_SECRET_ACCESS_KEY }}
          AWS_PUBLIC_BUCKET_NAME: ${{ secrets.AWS_PUBLIC_BUCKET_NAME }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
          SECRET: ${{ secrets.SECRET }}
          MAX_AGE: ${{ secrets.MAX_AGE }}
          CONFIRMATION_TOKEN_EXPIRED_AT: ${{ secrets.CONFIRMATION_TOKEN_EXPIRED_AT }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          run: |
            echo "ENV OK"
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ubuntu
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: ECR_REGISTRY, ECR_REPOSITORY, IMAGE_TAG, BASE_FRONT_URL, BASE_SERVER_URL, DB_USERNAME, DB_PORT, DB_HOST, DB_PASSWORD, DB_NAME, SMTP_LOGIN, SMTP_PASS, SMTP_SERVER,EMAIL_SENDER,JWT_SECRET,JWT_EXPIRATION_TIME,SECRET, MAX_AGE, CONFIRMATION_TOKEN_EXPIRED_AT, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_CALLBACK_URL, AWS_PUBLIC_BUCKET_NAME, AWS_IMAGE_BUCKET_ACCESS_KEY_ID, AWS_IMAGE_BUCKET_SECRET_ACCESS_KEY,DEV_AWS_REGION
          script: |
            aws ecr get-login-password --region $DEV_AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker stop backend_dev || true
            docker rm backend_dev || true
            docker image prune --all --force
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker network create backend_dev || true
            docker run -d \
              --name backend_dev \
              --network backend_dev \
              --restart unless-stopped \
              -e PORT=3000 \
              -p 8080:3000 \
              -e BASE_FRONT_URL=$BASE_FRONT_URL \
              -e BASE_SERVER_URL=$BASE_SERVER_URL \
              -e NODE_ENV='prod' \
              -e DB_USERNAME=$DB_USERNAME \
              -e DB_PORT=$DB_PORT \
              -e DB_HOST=$DB_HOST \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              -e SMTP_LOGIN=$SMTP_LOGIN \
              -e SMTP_PASS=$SMTP_PASS \
              -e SMTP_SERVER=$SMTP_SERVER \
              -e EMAIL_SENDER=$EMAIL_SENDER \
              -e JWT_SECRET=$JWT_SECRET \
              -e JWT_EXPIRATION_TIME=$JWT_EXPIRATION_TIME \
              -e SECRET=$SECRET \
              -e MAX_AGE=$MAX_AGE \
              -e CONFIRMATION_TOKEN_EXPIRED_AT=$CONFIRMATION_TOKEN_EXPIRED_AT \
              -e GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID \
              -e GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET \
              -e GOOGLE_CALLBACK_URL=$GOOGLE_CALLBACK_URL \
              -e AWS_PUBLIC_BUCKET_NAME=$AWS_PUBLIC_BUCKET_NAME \
              -e AWS_IMAGE_BUCKET_ACCESS_KEY_ID=$AWS_IMAGE_BUCKET_ACCESS_KEY_ID\
              -e AWS_IMAGE_BUCKET_SECRET_ACCESS_KEY=$AWS_IMAGE_BUCKET_SECRET_ACCESS_KEY\
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Create file status.txt and write the job status into it
        if: always()
        run: |
          echo ${{ job.status }} > status.txt
      - name: Upload file status.txt as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_to_notification
          path: status.txt
